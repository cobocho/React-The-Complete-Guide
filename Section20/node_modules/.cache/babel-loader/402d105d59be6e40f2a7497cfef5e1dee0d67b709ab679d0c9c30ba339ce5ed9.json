{"ast":null,"code":"const FIREBASE_DOMAIN = \"https://react-http-ee2ff-default-rtdb.firebaseio.com\";\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n  console.log(response);\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n  const transformedQuotes = [];\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: \"POST\",\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n  const transformedComments = [];\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n}","map":{"version":3,"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","console","log","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sources":["/Users/admin/Desktop/React/React-The-Complete-Guide/Section20/src/lib/api.js"],"sourcesContent":["const FIREBASE_DOMAIN = \"https://react-http-ee2ff-default-rtdb.firebaseio.com\";\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  console.log(response);\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quotes.\");\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not fetch quote.\");\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: \"POST\",\n    body: JSON.stringify(quoteData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not create quote.\");\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(requestData.commentData),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not add comment.\");\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || \"Could not get comments.\");\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}